import { Router } from 'express';
import { getCustomRepository } from 'typeorm';

import CategoryRepository from '../repositories/CategoryRepository';
import CreateCategoryService from '../services/CreateCategoryService';
import TransactionsRepository from '../repositories/TransactionsRepository';
import CreateTransactionService from '../services/CreateTransactionService';
// import DeleteTransactionService from '../services/DeleteTransactionService';
// import ImportTransactionsService from '../services/ImportTransactionsService';

const transactionsRouter = Router();

transactionsRouter.get('/', async (request, response) => {
  // TODO
});

transactionsRouter.post('/', async (request, response) => {
  const { title, value, type, category } = request.body;

  const categoryRepository = getCustomRepository(CategoryRepository);

  const categoryExists = await categoryRepository.findOne({
    where: { title: category },
  });

  if (!categoryExists) {
    const createCategoryService = new CreateCategoryService();

    const createdCategory = await createCategoryService.execute(category);

    const createTransactionService = new CreateTransactionService();

    const transaction = await createTransactionService.execute({
      title,
      value,
      type,
      category_id: createdCategory.id,
    });

    return response.json(transaction);
  }

  return response.json({ message: 'Final do metodo post' });
});

transactionsRouter.delete('/:id', async (request, response) => {
  // TODO
});

transactionsRouter.post('/import', async (request, response) => {
  // TODO
});

export default transactionsRouter;
